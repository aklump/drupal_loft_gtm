<?php

/**
 * @file
 * Provides unit tests for loft_gtm
 *
 * @ingroup loft_gtm
 * @{
 */
class LoftGTMUnitTestCase extends DrupalUnitTestCase {

  public static function getInfo() {
    return array(
      'name'        => 'Google Tag Manager API Unit tests',
      'description' => 'Unit testing for the Google Tag Manager API module.',
      'group'       => 'Google Tag Manager API',
    );
  }

  public function setUp($modules = array()) {
    parent::setUp($modules);
    module_load_include('inc', 'loft_gtm', 'includes/loft_gtm.queue');
    $this->control = new \stdClass;
    $this->control->php = array(
      '#method' => 'push',
      '#params' =>
        array(
          'event'    => 'eventTracker',
          'eventCat' => 'Contact',
          'eventAct' => 'Request',
          'eventLbl' => 'General Inquiries',
        ),
    );
  }

  public function testGroup1() {
    $this->subtest__loft_gtm_queue();
    $this->subtest__scope();
  }

  public function subtest__loft_gtm_queue() {
    unset($_SESSION['loft_gtm']['queue']);

    /**
     * Assert the first time loft_gtm_queue_add is called an empty array is returned
     */
    $_control_group = 'loft_gtm_queue_add';
    // Desired test result
    $control = array();
    // The test and result
    $return = loft_gtm_queue_add();
    $result = $return;
    $this->assertIdentical($control, $result, "Assert the first time loft_gtm_queue_add is called an empty array is returned", $_control_group);
    // END ASSERT

    /**
     * Assert when loft_gtm_queue_add is called with an argument is it returned as the first element of the return array
     */
    $_control_group = 'loft_gtm_queue_add';
    // Desired test result
    $control = $this->control->php + array(
        '#theme' => 'loft_gtm_datalayer',
        '#scope' => 'footer',
      );
    $control = array(
      0 . md5(serialize($this->control->php)) => $control,
    );
    // The test and result
    $return = loft_gtm_queue_add($this->control->php);
    $result = $return;
    $this->assertIdentical($control, $result, "Assert when loft_gtm_queue_add is called with an argument is it returned as the first element of the return array", $_control_group);

    // Assert when the same event is added, two total events are returned
    $control = $this->control->php + array(
        '#theme' => 'loft_gtm_datalayer',
        '#scope' => 'footer',
      );
    $control = array(
      0 . md5(serialize($this->control->php)) => $control,
      1 . md5(serialize($this->control->php)) => $control,
    );
    $return = loft_gtm_queue_add($this->control->php);
    $result = $return;
    $this->assertIdentical($control, $result, "Assert when the same event is added, two total events are returned", $_control_group);
    // END ASSERT

    // Assert calling loft_gtm_queue_add now, with no arguments returns both values previously added
    $return = loft_gtm_queue_add();
    $result = $return;
    $this->assertIdentical($control, $result, "Assert calling loft_gtm_queue_add now, with no arguments returns both values previously added", $_control_group);

    /**
     * Assert called loft_gtm_queue_clear with an empty doesn't alter the queue
     */
    $_control_group = 'loft_gtm_queue_clear';
    // Desired test result
    $control = $_SESSION['loft_gtm']['queue'];
    // The test and result
    $return = loft_gtm_queue_clear(array());
    $result = $return;
    $this->assertIdentical($control, $result, "Assert called loft_gtm_queue_clear with an empty doesn't alter the queue", $_control_group);
    // END ASSERT

    /**
     * Assert calling loft_gtm_queue_clear with one id only removes that id
     */
    $_control_group = 'loft_gtm_queue_clear';
    // Desired test result
    $subject = 0 . md5(serialize($this->control->php));
    $control = $this->control->php + array(
        '#theme' => 'loft_gtm_datalayer',
        '#scope' => 'footer',
      );
    $control = array(
      1 . md5(serialize($this->control->php)) => $control,
    );
    // The test and result
    $return = loft_gtm_queue_clear($subject);
    $result = $return;
    $this->assertIdentical($control, $result, "Assert calling loft_gtm_queue_clear with one id only removes that id", $_control_group);
    // END ASSERT

    /**
     * Assert calling loft_gtm_queue_clear with an invalid id does nothing
     */
    $_control_group = 'loft_gtm_queue_clear';
    // Desired test result
    $control = $_SESSION['loft_gtm']['queue'];
    // The test and result
    $return = loft_gtm_queue_clear(array('chocolate'));
    $result = $return;
    $this->assertIdentical($control, $result, "Assert calling loft_gtm_queue_clear with an invalid id does nothing", $_control_group);
    // END ASSERT
  }

  public function subtest__scope() {

    /**
     * Assert when method is push the scope is set to footer
     */
    $_control_group = 'loft_gtm_queue_add';
    // Desired test result
    $control = 'footer';
    // The test and result
    unset($_SESSION['loft_gtm']['queue']);
    $subject = $this->control->php;
    $return = loft_gtm_queue_add($subject);
    $id = key($return);
    $result = $return[$id]['#scope'];
    $this->assertIdentical($control, $result, "Assert when method is push the scope is set to footer", $_control_group);
    // END ASSERT

    /**
     * Assert when method is blank the scope is set to header
     */
    $_control_group = 'loft_gtm_queue_add';
    // Desired test result
    $control = 'header';
    // The test and result
    loft_gtm_queue_clear(array($id));
    $subject = $this->control->php;
    $subject['#method'] = '';
    $return = loft_gtm_queue_add($subject);
    $id = key($return);
    $result = $return[$id]['#scope'];
    $this->assertIdentical($control, $result, "Assert when method is blank the scope is set to header", $_control_group);
    // END ASSERT
  }
}
